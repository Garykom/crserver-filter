server {
    listen 2542;
    server_name localhost;

    #charset koi8-r;

    #access_log  logs/host.access.log  main;
    location / {
        root html;
        index index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root html;
    }

    location /hello_lua {
        default_type "text/html";
        content_by_lua_block {
            ngx.say('<h3>Hello World Lua !!!</h3>')
        }
    }

    location /repos {

        # адрес хранилища
        proxy_pass http://localhost:8080;

        proxy_read_timeout 6000;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # значения этих параметров ОБЯЗАТЕЛЬНО должны быть одинаковыми
        # https://github.com/openresty/lua-nginx-module#lua_need_request_body
        client_body_buffer_size 4096m;
        client_body_timeout 6000s;
        client_max_body_size 4096m;

        rewrite_by_lua_block {

            ngx.req.read_body()

            local req = ngx.req.get_body_data()
            if req == nil then
            return
            end

            -- замена версии
            if req then
            --req = ngx.re.gsub(req, 'version="8.3.23.1688"', 'version="8.3.22.2239"')
            req = ngx.re.gsub(req, "version=\"8[.]3[.]23[.]....\"", "version=\"8.3.22.2239\"")
            end
            ngx.req.set_body_data(req)

            -- local date = os.date()
            -- local out = io.open("C:/1C/nginx.txt","a")
            -- out:write(tostring(date).."\n")
            -- out:write(""..req.."\n")

            -- local versionPattern = [[version="(.*)"]]
            -- local version = req:match(versionPattern)
            -- out:write(tostring(version).."\n")

            -- io.close(out)

            local commentPattern = [[<crs:comment>(.*)</crs:comment>]]
            local message
            if req:match([[DevDepot_commitObjects]]) ~= nil then
            message = req:match(commentPattern) -- комментарий хранилища
            elseif req:match([[DevDepot_changeVersion]]) ~= nil then
            local newVersion = req:match([[<crs:newVersion>(.*)</crs:newVersion>]])
            if newVersion == nil then
            return
            end
            message = newVersion:match(commentPattern)
            else
            return
            end

            -- проверка на пустой комментарий
            if message == nil then
            ngx.status = ngx.HTTP_BAD_REQUEST
            ngx.header.content_type = 'text/plain; charset=utf-8'
            ngx.say("ОТСУТСТВУЕТ КОММЕНТАРИЙ")
            ngx.exit(ngx.HTTP_BAD_REQUEST)
            end

            -- вот здесь можно написать свои проверки
            local five_digits = message:match([[^#%d%d%d%d%d]])
            local no_task = message:match([[^#нетзадачи]])
            local double_n = message:match("\n\n")
            if (five_digits ~= nil or no_task ~= nil) and double_n ~= nil then
            return
            else
            --ngx.status = ngx.HTTP_BAD_REQUEST
            --ngx.header.content_type = 'text/plain; charset=utf-8'
            --ngx.say("НЕВЕРНЫЙ ФОРМАТ КОММЕНТАРИЯ")
            --ngx.say("комментарий должен:")
            --ngx.say("- начинаться на #12345 (где 12345 - номер задачи) или на #нетзадачи")
            --ngx.say("- содержать пустую строку, отделяющую заголовок комментария от тела")
            --ngx.exit(ngx.HTTP_BAD_REQUEST)
            end

        }
    }
}
